
package weibo4j.util;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.URLEncoder;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import javax.activation.MimetypesFileTypeMap;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import javax.security.cert.CertificateException;
import javax.security.cert.X509Certificate;

import org.apache.http.Header;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.client.params.CookiePolicy;
import org.apache.http.client.params.HttpClientParams;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.scheme.SchemeSocketFactory;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.cookie.Cookie;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.client.DefaultHttpRequestRetryHandler;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.CoreProtocolPNames;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.log4j.Logger;

import weibo4j.http.ImageItem;
import weibo4j.http.Response;
import weibo4j.model.Configuration;
import weibo4j.model.MySSLSocketFactory;
import weibo4j.model.Paging;
import weibo4j.model.PostParameter;
import weibo4j.model.WeiboException;
import weibo4j.org.json.JSONException;

/**
 * @author sinaWeibo
 */
public class CopyOfMyHttpClient implements java.io.Serializable {

    private static final long serialVersionUID = -176092625883595547L;
    private static final int OK = 200; // OK: Success!
    private static final int NOT_MODIFIED = 304; // Not Modified: There was no
                                                 // new data to return.
    private static final int BAD_REQUEST = 400; // Bad Request: The request was
                                                // invalid. An accompanying
                                                // error message will explain
                                                // why. This is the status code
                                                // will be returned during rate
                                                // limiting.
    private static final int NOT_AUTHORIZED = 401; // Not Authorized:
                                                   // Authentication credentials
                                                   // were missing or incorrect.
    private static final int FORBIDDEN = 403; // Forbidden: The request is
                                              // understood, but it has been
                                              // refused. An accompanying error
                                              // message will explain why.
    private static final int NOT_FOUND = 404; // Not Found: The URI requested is
                                              // invalid or the resource
                                              // requested, such as a user, does
                                              // not exists.
    private static final int NOT_ACCEPTABLE = 406; // Not Acceptable: Returned
                                                   // by the Search API when an
                                                   // invalid format is
                                                   // specified in the request.
    private static final int INTERNAL_SERVER_ERROR = 500;// Internal Server
                                                         // Error: Something is
                                                         // broken. Please post
                                                         // to the group so the
                                                         // Weibo team can
                                                         // investigate.
    private static final int BAD_GATEWAY = 502;// Bad Gateway: Weibo is down or
                                               // being upgraded.
    private static final int SERVICE_UNAVAILABLE = 503;// Service Unavailable:
                                                       // The Weibo servers are
                                                       // up, but overloaded
                                                       // with requests. Try
                                                       // again later. The
                                                       // search and trend
                                                       // methods use this to
                                                       // indicate when you are
                                                       // being rate limited.

    private String proxyHost = Configuration.getProxyHost();
    private int proxyPort = Configuration.getProxyPort();
    private String proxyAuthUser = Configuration.getProxyUser();
    private String proxyAuthPassword = Configuration.getProxyPassword();
    private String token;

    public String getProxyHost() {
        return proxyHost;
    }

    /**
     * Sets proxy host. System property -Dsinat4j.http.proxyHost or
     * http.proxyHost overrides this attribute.
     * 
     * @param proxyHost
     */
    public void setProxyHost(String proxyHost) {
        this.proxyHost = Configuration.getProxyHost(proxyHost);
    }

    public int getProxyPort() {
        return proxyPort;
    }

    /**
     * Sets proxy port. System property -Dsinat4j.http.proxyPort or
     * -Dhttp.proxyPort overrides this attribute.
     * 
     * @param proxyPort
     */
    public void setProxyPort(int proxyPort) {
        this.proxyPort = Configuration.getProxyPort(proxyPort);
    }

    public String getProxyAuthUser() {
        return proxyAuthUser;
    }

    /**
     * Sets proxy authentication user. System property -Dsinat4j.http.proxyUser
     * overrides this attribute.
     * 
     * @param proxyAuthUser
     */
    public void setProxyAuthUser(String proxyAuthUser) {
        this.proxyAuthUser = Configuration.getProxyUser(proxyAuthUser);
    }

    public String getProxyAuthPassword() {
        return proxyAuthPassword;
    }

    /**
     * Sets proxy authentication password. System property
     * -Dsinat4j.http.proxyPassword overrides this attribute.
     * 
     * @param proxyAuthPassword
     */
    public void setProxyAuthPassword(String proxyAuthPassword) {
        this.proxyAuthPassword = Configuration
                .getProxyPassword(proxyAuthPassword);
    }

    public String setToken(String token) {
        this.token = token;
        return this.token;
    }

    private final static boolean DEBUG = Configuration.getDebug();
    static Logger log = Logger.getLogger(CopyOfMyHttpClient.class.getName());
    HttpClient client = null;

    private static ClientConnectionManager sClientConnectionManager = null;

    private HttpClient getHttpClient(int timeout) throws KeyManagementException,
            NoSuchAlgorithmException {
        HttpParams params = new BasicHttpParams();
        HttpConnectionParams.setConnectionTimeout(params, 20000);
        HttpConnectionParams.setSoTimeout(params, timeout);
        HttpConnectionParams.setSocketBufferSize(params, 8192);
        HttpClient client = new DefaultHttpClient(getClientConnectionManager(),
                params);
        return client;
    }

    static public synchronized ClientConnectionManager getClientConnectionManager()
            throws KeyManagementException, NoSuchAlgorithmException {
        if (sClientConnectionManager == null) {
            // Create a registry for our three schemes; http and https will use
            // built-in factories

            SSLContext ctx1 = SSLContext.getInstance("TLS");
            X509TrustManager tm = new X509TrustManager() {
                @SuppressWarnings("unused")
                public void checkClientTrusted(X509Certificate[] xcs, String

                        string) throws CertificateException {
                }

                @SuppressWarnings("unused")
                public void checkServerTrusted(X509Certificate[] xcs, String

                        string) throws CertificateException {
                }

                public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                    return null;
                }

                @Override
                public void checkClientTrusted(
                        java.security.cert.X509Certificate[] chain, String authType)
                        throws java.security.cert.CertificateException {

                }

                @Override
                public void checkServerTrusted(
                        java.security.cert.X509Certificate[] chain, String authType)
                        throws java.security.cert.CertificateException {

                }
            };
            ctx1.init(null, new TrustManager[] {
                    tm
            }, null);
            SSLSocketFactory ssf = new SSLSocketFactory(ctx1,
                    SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
            // The sf.setHostnameVerifier method has been deprecated as of 4.1.
            // The alternative is to use one of the constructors. For example:
            // SSLSocketFactory sf = new SSLSocketFactory(sslContext,
            // SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);

            SchemeRegistry supportedSchemes = new SchemeRegistry();
            SchemeSocketFactory sf = PlainSocketFactory.getSocketFactory();
            supportedSchemes.register(new Scheme("http", 80, sf));
            supportedSchemes.register(new Scheme("https", 443, ssf));

            // HttpParams params = new BasicHttpParams();
            // params.setIntParameter(ConnManagerPNames.MAX_TOTAL_CONNECTIONS,
            // 320);
            // params.setParameter(ConnManagerPNames.MAX_CONNECTIONS_PER_ROUTE,
            // sConnPerRoute);

            sClientConnectionManager = new ThreadSafeClientConnManager(supportedSchemes);
            ((ThreadSafeClientConnManager) sClientConnectionManager).setMaxTotal(320);
            ((ThreadSafeClientConnManager) sClientConnectionManager).setDefaultMaxPerRoute(80);

        }
        // Null is a valid return result if we get an exception
        return sClientConnectionManager;
    }

    private int maxSize;

    public CopyOfMyHttpClient() {
        this(150, 30000, 30000, 1024 * 1024);
    }

    public CopyOfMyHttpClient(int maxConPerHost, int conTimeOutMs, int soTimeOutMs,
            int maxSize) {

        HttpParams params = new BasicHttpParams();
        HttpConnectionParams.setConnectionTimeout(params, 20000);
        HttpConnectionParams.setSoTimeout(params, soTimeOutMs);
        HttpConnectionParams.setSocketBufferSize(params, 8192);
        try {
            client = new DefaultHttpClient(getClientConnectionManager(),
                    params);
        } catch (KeyManagementException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        HttpClientParams.setCookiePolicy(client.getParams(),
                CookiePolicy.BROWSER_COMPATIBILITY);

        this.maxSize = maxSize;

    }

    /**
     * log调试
     */
    private static void log(String message) {
        if (DEBUG) {
            log.debug(message);
        }
    }

    /**
     * 处理http getmethod 请求
     */

    public Response get(String url) throws WeiboException {

        return get(url, new PostParameter[0]);

    }

    public Response get(String url, PostParameter[] params, boolean hasAuthortoken)
            throws WeiboException {
        log("Request:");
        log("GET:" + url);
        if (null != params && params.length > 0) {
            String encodedParams = CopyOfMyHttpClient.encodeParameters(params);
            if (-1 == url.indexOf("?")) {
                url += "?" + encodedParams;
            } else {
                url += "&" + encodedParams;
            }
        }
        HttpGet getmethod = new HttpGet(url);
        return httpRequest(getmethod, hasAuthortoken);

    }

    public Response get(String url, PostParameter[] params)
            throws WeiboException {
        log("Request:");
        log("GET:" + url);
        if (null != params && params.length > 0) {
            String encodedParams = CopyOfMyHttpClient.encodeParameters(params);
            if (-1 == url.indexOf("?")) {
                url += "?" + encodedParams;
            } else {
                url += "&" + encodedParams;
            }
        }
        HttpGet getmethod = new HttpGet(url);
        return httpRequest(getmethod);

    }

    public Response get(String url, PostParameter[] params, Paging paging)
            throws WeiboException {
        if (null != paging) {
            List<PostParameter> pagingParams = new ArrayList<PostParameter>(4);
            if (-1 != paging.getMaxId()) {
                pagingParams.add(new PostParameter("max_id", String
                        .valueOf(paging.getMaxId())));
            }
            if (-1 != paging.getSinceId()) {
                pagingParams.add(new PostParameter("since_id", String
                        .valueOf(paging.getSinceId())));
            }
            if (-1 != paging.getPage()) {
                pagingParams.add(new PostParameter("page", String
                        .valueOf(paging.getPage())));
            }
            if (-1 != paging.getCount()) {
                if (-1 != url.indexOf("search")) {
                    // search api takes "rpp"
                    pagingParams.add(new PostParameter("rpp", String
                            .valueOf(paging.getCount())));
                } else {
                    pagingParams.add(new PostParameter("count", String
                            .valueOf(paging.getCount())));
                }
            }
            PostParameter[] newparams = null;
            PostParameter[] arrayPagingParams = pagingParams
                    .toArray(new PostParameter[pagingParams.size()]);
            if (null != params) {
                newparams = new PostParameter[params.length
                        + pagingParams.size()];
                System.arraycopy(params, 0, newparams, 0, params.length);
                System.arraycopy(arrayPagingParams, 0, newparams,
                        params.length, pagingParams.size());
            } else {
                if (0 != arrayPagingParams.length) {
                    String encodedParams = CopyOfMyHttpClient
                            .encodeParameters(arrayPagingParams);
                    if (-1 != url.indexOf("?")) {
                        url += "&" + encodedParams;
                    } else {
                        url += "?" + encodedParams;
                    }
                }
            }
            return get(url, newparams);
        } else {
            return get(url, params);
        }
    }

    /**
     * 处理http post请求
     */

    public Response post(String url, PostParameter[] params)
            throws WeiboException {
        return post(url, params, true);

    }

    public Response post(String url, PostParameter[] params,
            Boolean WithTokenHeader) throws WeiboException {
        log("Request:");
        log("POST" + url);

        HttpPost postMethod = new HttpPost(url);
        for (int i = 0; i < params.length; i++) {
            // postMethod.addParameter(params[i].getName(),
            // params[i].getValue());
            postMethod.getParams().setParameter(params[i].getName(), params[i].getValue());
        }
        HttpParams param = postMethod.getParams();
        // param.setContentCharset("UTF-8");
        param.setParameter(CoreProtocolPNames.HTTP_CONTENT_CHARSET, "UTF-8");
        if (WithTokenHeader) {
            return httpRequest(postMethod);
        } else {
            return httpRequest(postMethod, WithTokenHeader);
        }
    }

    public Response httpRequest(HttpRequestBase method) throws WeiboException {
        return httpRequest(method, true);
    }

    public Response httpRequest(HttpRequestBase method, Boolean WithTokenHeader)
            throws WeiboException {
        InetAddress ipaddr;
        int responseCode = -1;
        try {
            ipaddr = InetAddress.getLocalHost();
            List<Header> headers = new ArrayList<Header>();
            if (WithTokenHeader) {
                if (token == null) {
                    throw new IllegalStateException("Oauth2 token is not set!");
                }

                for (Header hd : headers) {
                    log(hd.getName() + ": " + hd.getValue());
                }
            }

            ((DefaultHttpClient) client).setHttpRequestRetryHandler
                    (new DefaultHttpRequestRetryHandler(3, false));

            // client.executeMethod(method);//jhy

            HttpResponse res = client.execute(method);
            List<Cookie>  cookies = ((DefaultHttpClient) client).getCookieStore().getCookies();

            System.out.println(" [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[Cookie start]]]]]]]]]]]]]");  
            if (cookies.isEmpty()) {    
                System.out.println("None");    
            } else {    
                for (int i = 0; i < cookies.size(); i++) {  
                    System.out.println(" - " + cookies.get(i).toString());  
                }    
            } 
            
            Header[] resHeader = res.getAllHeaders();
            responseCode = res.getStatusLine().getStatusCode();
            log("Response:");
            log("https StatusCode:" + String.valueOf(responseCode));

            for (Header header : resHeader) {
                log(header.getName() + ":" + header.getValue());
            }
            Response response = new Response();

            InputStream stream = null;
            try {
                stream = res.getEntity().getContent();
            } catch (IllegalStateException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
            if (stream != null) {
                byte[] buffer = new byte[(int) res.getEntity().getContentLength()];
                int hasRead = 0;
                while (true) {
                    int actreadlen = 0;
                    try {
                        actreadlen = stream.read(buffer, hasRead, 1448);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    log("====content actualread length ===" + actreadlen);
                    if (actreadlen <= 0) {
                        break;
                    }
                    hasRead += actreadlen;
                }

                log("=contentlength=" + res.getEntity().getContentLength()
                        + "=read length=" + hasRead);

                response.setResponseAsString(new String(buffer));
            }

            log(response.toString() + "\n");

            if (responseCode != OK)

            {
                try {
                    throw new WeiboException(getCause(responseCode),
                            response.asJSONObject(), res.getStatusLine().getStatusCode());
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
            return response;

        } catch (IOException ioe) {
            throw new WeiboException(ioe.getMessage(), ioe, responseCode);
        } finally {
            method.releaseConnection();
        }

    }

    /*
     * 对parameters进行encode处理
     */
    public static String encodeParameters(PostParameter[] postParams) {
        StringBuffer buf = new StringBuffer();
        for (int j = 0; j < postParams.length; j++) {
            if (j != 0) {
                buf.append("&");
            }
            try {
                buf.append(URLEncoder.encode(postParams[j].getName(), "UTF-8"))
                        .append("=")
                        .append(URLEncoder.encode(postParams[j].getValue(),
                                "UTF-8"));
            } catch (java.io.UnsupportedEncodingException neverHappen) {
            }
        }
        return buf.toString();
    }

    private static String getCause(int statusCode) {
        String cause = null;
        switch (statusCode) {
            case NOT_MODIFIED:
                break;
            case BAD_REQUEST:
                cause = "The request was invalid.  An accompanying error message will explain why. This is the status code will be returned during rate limiting.";
                break;
            case NOT_AUTHORIZED:
                cause = "Authentication credentials were missing or incorrect.";
                break;
            case FORBIDDEN:
                cause = "The request is understood, but it has been refused.  An accompanying error message will explain why.";
                break;
            case NOT_FOUND:
                cause = "The URI requested is invalid or the resource requested, such as a user, does not exists.";
                break;
            case NOT_ACCEPTABLE:
                cause = "Returned by the Search API when an invalid format is specified in the request.";
                break;
            case INTERNAL_SERVER_ERROR:
                cause = "Something is broken.  Please post to the group so the Weibo team can investigate.";
                break;
            case BAD_GATEWAY:
                cause = "Weibo is down or being upgraded.";
                break;
            case SERVICE_UNAVAILABLE:
                cause = "Service Unavailable: The Weibo servers are up, but overloaded with requests. Try again later. The search and trend methods use this to indicate when you are being rate limited.";
                break;
            default:
                cause = "";
        }
        return statusCode + ":" + cause;
    }

    public String getToken() {
        return token;
    }

}
